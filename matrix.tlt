#include <iostream>
#include <vector>

template<class number>
Matrix<number>::Matrix(const int N, const int M)
{
	this->N = N;
	this->M = M;
	data.resize( N, std::vector<number>(M, 0) );
}


template<class number>
const number
Matrix<number>::get(const int i, const int j) const
{
	return data[i][j];
}


template<class number>
void
Matrix<number>::set(const int i, const int j, const number value)
{
	data[i][j] = value;
}


template<class number>
void
Matrix<number>::print() const
{
	for(int i = 0; i < this->N; i++)
	{
		for (int j = 0; j < this->M; j++)
		{
			std::cout << get(i, j) << " ";
		}
		std::cout << std::endl;
	}
}


template<class number>
void
Matrix<number>::fill_with(const number value)
{
	for(int i = 0; i < this->N; i++)
	{
		for(int j = 0; j < this->M; j++)
		{
			set(i, j, value);
		}
	}
}


template<class number>
Matrix<number>
Matrix<number>::operator+(const MatrixObject<number>& second) const
{
	Matrix<number> result(this->N, this->M);

	for(int i = 0; i < this->N; i++)
	{
		for (int j = 0; j < this->M; j++)
		{
			result.set(i, j, get(i, j) + second.get(i, j));
		}
	}

	return result;
}
