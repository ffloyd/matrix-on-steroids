template<class number>
Matrix<number>::Matrix(const int N, const int M) :
	N(N),
	M(M)
{
	data.resize( N, std::vector<number>(M, 0) );
}


template<class number>
template<class T>
Matrix<number>::Matrix(const T& source)
{
	N = source.N;
	M = source.M;

	data.resize( N, std::vector<number>(M, 0) );

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			data[i][j] = source.get(i, j);
		}
	}
}

template<class number>
const number
Matrix<number>::get(const int i, const int j) const
{
	return data[i][j];
}


template<class number>
void
Matrix<number>::set(const int i, const int j, const number value)
{
	data[i][j] = value;
}


template<class number>
void
Matrix<number>::print() const
{
	for(int i = 0; i < N; i++)
	{
		for (int j = 0; j < M; j++)
		{
			std::cout << get(i, j) << " ";
		}
		std::cout << std::endl;
	}
}


template<class number>
void
Matrix<number>::fill_with(const number value)
{
	for(int i = 0; i < N; i++)
	{
		for(int j = 0; j < M; j++)
		{
			set(i, j, value);
		}
	}
}


template<class number>
template<class RightOp>
matrix_operation::plus<number, Matrix<number>, RightOp>
Matrix<number>::operator+(const RightOp& right) const
{
	return matrix_operation::plus<number, Matrix<number>, RightOp>(*this, right, N, M);
}
